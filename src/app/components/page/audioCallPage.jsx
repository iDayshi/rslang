import React, { useState, useEffect } from "react";
import { useWord } from "../../hooks/useWords";
import { toast } from "react-toastify";
import GroupWords from "../groupWords";

const AudioCallPage = () => {
  const { words, getWords } = useWord();
  const [quizWords, setQuizWords] = useState([]);
  const [nextRound, setNextRound] = useState(false);
  const [score, setScore] = useState(0);
  const [wordCounter, setWordCounter] = useState(0);
  const [correctAnswers, setCorrectAnswers] = useState([]);
  const [wrongAnswers, setWrongAnswers] = useState([]);
  const [usedWords, setUsedWords] = useState([]);

  useEffect(() => {
    getWords(0, Math.random() * 30);
  }, []);

  useEffect(() => {
    if (wordCounter === 0) {
      let arr = words;
      arr = arr.sort(() => Math.random() - 0.5);
      setUsedWords(arr); // –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–≥–æ, –ø–æ—Ç–æ–º –±—É–¥–µ–º –±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –∏–∑ –Ω–µ–≥–æ, –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ—Å–µ—Ä—É —Ä–∞—É–Ω–¥–∞ –∏–≥—Ä—ã
    }
    if ((nextRound) && (wordCounter < 20)) {
      makeWords();
      setWordCounter(wordCounter + 1);
      setNextRound(!nextRound);
    }
    if (wordCounter === 20) {
      alert("Good job! " + Math.floor(100 * correctAnswers.length / 20) + " % correct. Your score " + score);
      setScore(0);
      setWordCounter(0);
    }
  }, [nextRound]);

  const spellWord = () => {
    quizWords.forEach((word) => {
      if (word.right) {
        const playWord = new Audio(`http://localhost:8080/${word.audio}`);
        playWord.play();
      }
    });
  };

  const spellSentense = () => {
    quizWords.forEach((word) => {
      if (word.right) {
        const playWord = new Audio(`http://localhost:8080/${word.audioExample}`);
        playWord.play();
      }
    });
  };

  const skipQuestion = () => {
    setWordCounter(wordCounter + 1);
    let correctWord;
    quizWords.forEach((word) => {
      if (word.right) {
        correctWord = word;
      }
    });
    setWrongAnswers([...wrongAnswers, correctWord]);
    setNextRound(!nextRound);
  };

  const handleCheck = (isTrue) => {
    isTrue
      ? toast.success("üåà –ü—Ä–∞–≤–∏–ª—å–Ω–æ", {
          position: "top-center",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined
        })
      : toast.error("ü¶Ñ –ù–µ–≤–µ—Ä–Ω–æ", {
          position: "top-center",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined
        });
    isTrue ? setScore(score + 1) : setScore(score);
    let correctWord;
    quizWords.forEach((word) => {
      if (word.right) {
        correctWord = word;
      }
    });
    isTrue ? setCorrectAnswers([...correctAnswers, correctWord]) : setWrongAnswers([...wrongAnswers, correctWord]);
    setNextRound(!nextRound);
  };

  const makeWords = () => {
    const wordsArr = words;
    const rightWordPosition = Math.floor(Math.random() * 5);
    const currentRoundWords = wordsArr.sort(() => Math.random() - 0.5).slice(0, 5); // —Å–æ–∑–¥–∞–µ–º –ø—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤—Å–µ—Ö —Å–ª–æ–≤
    for (let i = 0; i < 5; i++) {
      if (i === rightWordPosition) { // –Ω–∞ "–ø—Ä–∞–≤–∏–ª—å–Ω—É—é" –ø–æ–∑–∏—Ü–∏—é –ø–æ–º–µ—â–∞–µ–º "–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ" —Å–ª–æ–≤–æ
        setQuizWords([...quizWords, usedWords[wordCounter]]);
      } else if (currentRoundWords[i].id !== usedWords[wordCounter].id) { // –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–º–µ—â–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ currentRoundWords, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞–≤–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É
        setQuizWords([...quizWords, currentRoundWords[i]]);
      }
    }
    quizWords.forEach(el => { el.right = false; });
    quizWords[rightWordPosition].right = true;
    const playWord = new Audio(
      `http://localhost:8080/${usedWords[wordCounter].audio}`
    );
    playWord.play();
    console.log(quizWords);
  };

  const startGame = () => {
    setScore(0);
    setCorrectAnswers([]);
    setWrongAnswers([]);
    makeWords();
  };

  const handleGroupChange = (groupIndex) => {
    getWords(groupIndex, Math.random() * 30);
  };

  return (
    <div className="container">
      <div className="row gutters-sm">
        <h1>–ê—É–¥–∏–æ–≤—ã–∑–æ–≤</h1>
      </div>
      <div>
        <button type="button" className="btn-close" aria-label="Close"></button>
      </div>
      <h4>Score: {score}</h4>
      <section className="text-center">
        <h4>–°–ª–æ–∂–Ω–æ—Å—Ç—å</h4>
        <GroupWords onGroupChange={handleGroupChange} />
        <button onClick={startGame} type="button" className="btn btn-info m-2">
          –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
        </button>
      </section>

      <section className="d-flex justify-content-center">
        <button onClick={spellWord} type="button" title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–æ" className="btn btn-info btn-lg m-2">
          ‚ô¨
        </button>
        <button onClick={spellSentense} type="button" title="–û–∑–≤—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä" className="btn btn-info btn-sm m-2">
          ‚ô¨
        </button>
      </section>

      <section className="d-flex justify-content-center">
        {quizWords.map((word) => {
          return (
            <div key={word.id}>
              <button
                onClick={() => handleCheck(word.right)}
                className="btn btn-warning m-1"
              >
                {" "}
                {word.wordTranslate}{" "}
              </button>
            </div>
          );
        })}
      </section>

      <section className="text-center">
        <button
          onClick={skipQuestion}
          type="button"
          className="btn btn-info m-2"
        >
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        </button>
      </section>

      <section>
        {quizWords.map(function (word) {
            return (
                <div key={`${word.id}A`}>
                  <img
                    src={`http://localhost:8080/${word.image}`}
                    alt={word.word} />
                  <button
                    onClick={() => {
                      const playWord = new Audio(`http://localhost:8080/${word.audio}`);
                      playWord.play();
                    } }
                    className="btn btn-light m-2"
                  >
                    ‚ô¨
                  </button>
                  <span>{" "}{word.word}{" - "}{word.wordTranslate}</span>
                </div>
              );
          })
        }
      </section>

      <section className="results">
        <h4>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</h4>
        {correctAnswers.map((word) => {
          return (
            <div key={`${word.id}C`}>
              <button
                onClick={() => {
                  const playWord = new Audio(`http://localhost:8080/${word.audio}`);
                  playWord.play();
                }}
                className="btn btn-success m-2"
                >
                ‚ô¨
              </button>
              <span>{" "}{word.word}{" - "}{word.wordTranslate}</span>
            </div>
          );
        })}
        <h4>–û—à–∏–±–∫–∏:</h4>
        {wrongAnswers.map((word) => {
          return (
            <div key={`${word.id}M`}>
              <button
                onClick={() => {
                  const playWord = new Audio(`http://localhost:8080/${word.audio}`);
                  playWord.play();
                }}
                className="btn btn-danger m-2"
              >
                ‚ô¨
              </button>
              <span>{" "}{word.word}{" - "}{word.wordTranslate}</span>
            </div>
          );
        })}
      </section>
    </div>
  );
};

export default AudioCallPage;
